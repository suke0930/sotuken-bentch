@startuml Class Diagram
!theme plain
skinparam classAttributeIconSize 0
skinparam backgroundColor #FFFFFF

title クラス図 - Backend Proxy Server

package "Backend Server" {
  
  class Server {
    - httpServer: HTTPServer
    - wsManager: WebSocketManager
    + listen(port: number): void
    + close(): void
  }
  
  class WebSocketManager {
    - wss: WebSocketServer
    - clients: Set<WebSocket>
    + constructor(server: HTTPServer)
    + broadcastProgress(progress): void
    + broadcastComplete(taskId, filename): void
    + broadcastError(taskId, error): void
    + getClientCount(): number
    + close(): void
  }
  
  class DownloadTask {
    - taskId: string
    - url: string
    - saveDir: string
    - filename: string
    - totalBytes: number
    - downloadedBytes: number
    - status: string
    - currentSpeed: number
    - onProgress?: callback
    - onComplete?: callback
    - onError?: callback
    + constructor(taskId, url, saveDir, callbacks)
    + start(): Promise<void>
    + cancel(): void
    + getStatus(): DownloadProgress
    + getFilename(): string
    + getTaskId(): string
    - handleProgress(downloaded, total): void
    - handleComplete(): void
    - handleError(error): void
    - calculateRemainingTime(): number
  }
  
  class ProxyController {
    + {static} getServersList(req, res): Promise<void>
    + {static} getJDKList(req, res): Promise<void>
    + {static} getAssetFilesList(req, res): Promise<void>
  }
  
  class DownloadController {
    - {static} activeTasks: Map<string, DownloadTask>
    + {static} setWebSocketManager(manager): void
    + {static} startDownload(req, res): Promise<void>
    + {static} getDownloadStatus(req, res): void
    + {static} getActiveDownloads(req, res): void
    + {static} cancelDownload(req, res): void
  }
  
  class Router {
    + get(path: string, handler: Function): void
    + post(path: string, handler: Function): void
    + delete(path: string, handler: Function): void
  }
  
  class ExpressApp {
    + use(middleware: Function): void
    + get(path: string, handler: Function): void
    + listen(port: number): void
  }
  
}

package "Types" {
  
  interface DownloadProgress {
    + taskId: string
    + totalBytes: number
    + downloadedBytes: number
    + percentage: number
    + speed: number
    + remainingTime: number
    + status: string
    + filename: string
    + error?: string
  }
  
  interface WSMessage {
    + type: WSMessageType
    + data?: any
    + timestamp: string
  }
  
  interface ApiResponse {
    + success: boolean
    + data?: any
    + error?: object
    + timestamp: string
  }
  
}

package "External" {
  
  class AssetServer {
    + GET /api/v1/servers
    + GET /api/v1/jdk
    + GET /api/assets/jdk/*
    + GET /api/assets/servers/*
  }
  
  class Client {
    - ws: WebSocket
    + fetchList(type): Promise<void>
    + startDownload(url): Promise<void>
    + updateProgress(data): void
    + displayComplete(data): void
  }
  
}

' Relationships
Server *-- WebSocketManager
Server *-- ExpressApp
ExpressApp *-- Router
Router ..> ProxyController : uses
Router ..> DownloadController : uses

DownloadController o-- DownloadTask : manages
DownloadController ..> WebSocketManager : uses

DownloadTask ..> DownloadProgress : creates
WebSocketManager ..> WSMessage : sends

ProxyController ..> AssetServer : proxies to
DownloadTask ..> AssetServer : downloads from

Client ..> WebSocketManager : connects to
Client ..> ProxyController : HTTP requests
Client ..> DownloadController : HTTP requests

ProxyController ..> ApiResponse : returns
DownloadController ..> ApiResponse : returns

note right of DownloadTask
  ダウンロードタスク管理クラス
  
  主な機能：
  - Axiosによるストリーミングダウンロード
  - 進捗計算（速度、残り時間）
  - コールバック実行
  - エラーハンドリング
end note

note right of WebSocketManager
  WebSocket接続管理クラス
  
  主な機能：
  - クライアント接続管理
  - プログレス情報のブロードキャスト
  - Keep-alive (ping/pong)
  - 接続状態監視
end note

note bottom of AssetServer
  外部Assetサーバー
  
  提供するAPI：
  - サーバーリスト
  - JDKリスト
  - ファイル配信
end note

@enduml
