@startuml Download Sequence Diagram
!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

title ダウンロードシーケンス図

actor User as user
participant "Client\n(Browser)" as client
participant "Backend\nProxy" as backend
participant "WebSocket" as ws
participant "Asset\nServer" as asset
database "Download\nDirectory" as storage

== リスト取得フェーズ ==

user -> client: リストタイプ選択\n(servers/jdk)
activate client

client -> backend: GET /api/list/{type}
activate backend

backend -> asset: GET /api/v1/{type}
activate asset

asset --> backend: JSON Response\n(サーバー/JDKリスト)
deactivate asset

backend --> client: JSON Response
deactivate backend

client -> client: リストを表示\nバージョン選択UI生成

user -> client: ファイル選択\n(バージョン、OS等)
client -> client: ダウンロードURL確定
deactivate client

== WebSocket接続確立 ==

client -> ws: WebSocket接続開始
activate ws
ws --> client: 接続確立
ws -> client: ping メッセージ
client -> ws: pong メッセージ
note right of client
  Keep-alive
  接続維持
end note

== ダウンロードフェーズ ==

user -> client: "Start Download"\nボタンクリック
activate client

client -> backend: POST /api/download\n{ url: "..." }
activate backend

backend -> backend: DownloadTask生成\ntaskId発行

backend --> client: 202 Accepted\n{ taskId: "task-xxx" }
note left of backend
  即座にレスポンス
  ダウンロードは非同期実行
end note

backend -> asset: GET {fileUrl}\n(Streaming)
activate asset

loop ファイルストリーミング
    asset --> backend: データチャンク
    backend -> storage: ファイルに書き込み
    activate storage
    storage --> backend: 書き込み完了
    deactivate storage
    
    backend -> ws: download_progress\n{ percentage, speed, etc }
    ws -> client: プログレス情報配信
    client -> client: プログレスバー更新\n速度・残り時間表示
    
    note over client
      0.5秒ごとに更新
      ・進捗率 (%)
      ・速度 (KB/s)
      ・残り時間 (秒)
      ・ダウンロード済み/合計
    end note
end

asset --> backend: ストリーム完了
deactivate asset

backend -> backend: DownloadTask完了\nコールバック実行

backend -> ws: download_complete\n{ taskId, filename }
ws -> client: 完了通知
deactivate backend

client -> client: ステータス更新\n"COMPLETED"表示
deactivate client

user -> user: ダウンロード完了✅

== エラー発生時 ==

alt ダウンロードエラー
    backend -> ws: download_error\n{ taskId, error }
    ws -> client: エラー通知
    client -> client: エラー表示
    user -> user: エラー確認❌
end

deactivate ws

@enduml
